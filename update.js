// Generated by CoffeeScript 1.10.0
(function() {
  var current_package, current_version, getLatestPackageInfo, installNewVersion, latest_package, log;

  log = require('./simple-logger');

  current_package = require('./package.json');

  current_version = current_package.version;

  log.info('Current version is ' + current_version);

  latest_package = {};

  getLatestPackageInfo = function(callback) {
    var https, request;
    https = require('https');
    log.info('Checking for latest version...');
    request = https.get('https://raw.githubusercontent.com/nicolaschan/market/master/package.json', function(res) {
      var body;
      body = '';
      res.on('data', function(chunk) {
        return body += chunk;
      });
      return res.on('end', function() {
        return callback(JSON.parse(body));
      });
    });
    return request.on('error', function(err) {
      return log.error(JSON.stringify(err));
    });
  };

  installNewVersion = function(callback) {
    var archive_url, fs, https, moveOldConfig, path, request, temp_directory, zip_file, zip_file_path;
    https = require('https');
    fs = require('fs');
    path = require('path');
    moveOldConfig = function(old_config_path) {
      var new_config_path;
      new_config_path = __dirname + path.sep + 'config-' + current_version + '.json';
      fs.rename(old_config_path, new_config_path);
      log.info('The old config file has been moved to ' + new_config_path);
      return log.warn('You will need to update the new config.json!');
    };
    temp_directory = __dirname + path.sep + 'temp';
    if (!fs.existsSync(temp_directory)) {
      fs.mkdirSync(temp_directory);
    }
    zip_file_path = temp_directory + path.sep + 'market.zip';
    zip_file = fs.createWriteStream(zip_file_path);
    log.info('Downloading new version...');
    archive_url = 'https://codeload.github.com/nicolaschan/market/zip/v1.0.0-pre1';
    return request = https.get(archive_url, function(res) {
      res.pipe(zip_file);
      return res.on('end', function() {
        var unzip;
        unzip = require('unzip');
        fs.createReadStream(zip_file_path).pipe(unzip.Extract({
          path: temp_directory + path.sep + 'market'
        }));
        return moveOldConfig(__dirname + path.sep + 'config.json');
      });
    });
  };

  getLatestPackageInfo(function(latest_package) {
    log.info('Newest available version is ' + latest_package.version);
    if (current_version !== latest_package.version) {
      return installNewVersion();
    } else {
      return log.success('This market installation is up to date');
    }
  });

}).call(this);
