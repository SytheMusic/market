// Generated by CoffeeScript 1.10.0
(function() {
  var async, current_package, current_version, getLatestPackageInfo, installNewVersion, log, newest_version;

  log = require('./simple-logger');

  async = require('async');

  current_package = require('./package.json');

  current_version = current_package.version;

  log.info('Current version is ' + current_version);

  newest_version = '';

  getLatestPackageInfo = function(callback) {
    var https, request;
    https = require('https');
    log.info('Fetching package info about the latest version...');
    request = https.get('https://raw.githubusercontent.com/nicolaschan/market/master/package.json', function(res) {
      var body;
      body = '';
      res.on('data', function(chunk) {
        return body += chunk;
      });
      return res.on('end', function() {
        log.success('Package info fetched');
        return callback(JSON.parse(body));
      });
    });
    return request.on('error', function(err) {
      return log.error(err);
    });
  };

  installNewVersion = function(callback) {
    var createTempDirectory, deleteTempDirectory, deleteZip, downloadZip, exec, extractZip, fs, https, installDependencies, moveOldConfig, path, replaceFiles, temp_directory, zip_file_path;
    log.info('Updating...');
    https = require('https');
    fs = require('fs');
    path = require('path');
    exec = require('child_process').exec;
    temp_directory = __dirname + path.sep + 'temp';
    zip_file_path = temp_directory + path.sep + 'market.zip';
    createTempDirectory = function(callback) {
      if (!fs.existsSync(temp_directory)) {
        log.info('Creating temp directory...');
        fs.mkdirSync(temp_directory);
      }
      return callback();
    };
    downloadZip = function(callback) {
      var archive_url, request, zip_file;
      zip_file = fs.createWriteStream(zip_file_path);
      log.info('Downloading new version...');
      archive_url = 'https://codeload.github.com/nicolaschan/market/zip/v1.0.0-pre1';
      return request = https.get(archive_url, function(res) {
        res.pipe(zip_file);
        return res.on('end', function() {
          log.success('Download complete');
          return callback();
        });
      });
    };
    extractZip = function(callback) {
      var unzip, zip_readstream;
      log.info('Extracting downloaded zip file...');
      unzip = require('unzip');
      zip_readstream = fs.createReadStream(zip_file_path);
      return zip_readstream.pipe(unzip.Extract({
        path: temp_directory
      })).on('finish', function() {
        log.success('Extract complete');
        return callback();
      });
    };
    deleteZip = function(callback) {
      log.info('Deleting zip file...');
      return fs.unlink(zip_file_path, function(err) {
        if (err != null) {
          return log.error(err);
        } else {
          return log.success('Zip file deleted');
        }
      });
    };
    moveOldConfig = function(callback) {
      var new_config_path, old_config_path;
      log.info('Moving config.json...');
      old_config_path = __dirname + path.sep + 'config.json';
      new_config_path = __dirname + path.sep + 'config-' + current_version + '.json';
      return fs.rename(old_config_path, new_config_path, function(err) {
        if (err != null) {
          log.error(err);
        } else {
          log.success('The old config file has been moved to ' + new_config_path);
          log.warn('You will need to update the new config.json!');
        }
        return callback();
      });
    };
    replaceFiles = function(callback) {
      var new_market_directory, replaceFile;
      new_market_directory = temp_directory + path.sep + 'market-' + '1.0.0-pre1';
      replaceFile = function(filename, callback) {
        var file_path;
        file_path = new_market_directory + path.sep + filename;
        return fs.stat(file_path, function(err, stats) {
          var ncp;
          if (stats.isFile()) {
            fs.rename(file_path, __dirname + path.sep + filename, function(err) {
              if (err != null) {
                log.error(err);
              }
              return callback();
            });
          }
          if (stats.isDirectory()) {
            ncp = require('ncp').ncp;
            return ncp(file_path, __dirname + path.sep + filename, function(err) {
              if (err != null) {
                log.error(err);
              }
              return callback();
            });
          }
        });
      };
      log.info('Replacing old files with the new ones...');
      return fs.readdir(temp_directory + path.sep + 'market-1.0.0-pre1', function(err, files) {
        if (err != null) {
          return log.error(err);
        } else {
          return async.each(files, replaceFile, callback);
        }
      });
    };
    deleteTempDirectory = function(callback) {
      var escapeSpaces, temp_directory_safe_path;
      log.info('Deleting temp folder...');
      escapeSpaces = function(string) {
        var addToOutput, i, len, output, piece, pieces, ref;
        pieces = string.split(' ');
        output = pieces[0];
        addToOutput = function(piece) {
          return output += '\\ ' + piece;
        };
        ref = pieces.slice(1);
        for (i = 0, len = ref.length; i < len; i++) {
          piece = ref[i];
          addToOutput(piece);
        }
        return output;
      };
      temp_directory_safe_path = escapeSpaces(temp_directory);
      return exec('rm -rf ' + temp_directory_safe_path, function(err, stdout, stderr) {
        if (err != null) {
          log.error(err);
        } else {
          log.success('Temp folder deleted');
        }
        return callback();
      });
    };
    installDependencies = function(callback) {
      var child;
      log.info('Installing dependencies... (this may take a while and requires an internet connection)');
      return child = exec('npm install', function(err, stdout, stderr) {
        if (err != null) {
          return log.erorr('An error occurred trying to install dependencies, make sure you have npm installed');
        } else {
          log.success('Dependencies installed');
          return callback();
        }
      });
    };
    return async.series([createTempDirectory, downloadZip, extractZip, moveOldConfig, replaceFiles, installDependencies]);
  };

  getLatestPackageInfo(function(latest_package) {
    newest_version = latest_package.version;
    log.info('Newest available version is ' + newest_version);
    if (current_version !== newest_version) {
      log.info('Update is required, updating now...');
      return installNewVersion();
    } else {
      log.success('Current installation is up to date!');
      return log.success('This market installation is up to date');
    }
  });

}).call(this);
