// Generated by CoffeeScript 1.10.0
(function() {
  var async, conn, http_server, httpolyglot_server, https_server, mongoose, start, stop;

  async = require('async');

  http_server = null;

  https_server = null;

  httpolyglot_server = null;

  mongoose = null;

  conn = null;

  stop = function(ready) {
    var stopHttp, stopHttpolyglot, stopHttps, stopMongoose;
    stopHttp = function(callback) {
      if (http_server != null) {
        return http_server.close(callback);
      } else {
        return callback();
      }
    };
    stopHttps = function(callback) {
      if (https_server != null) {
        return https_server.close(callback);
      } else {
        return callback();
      }
    };
    stopHttpolyglot = function(callback) {
      if (httpolyglot_server != null) {
        return httpolyglot_server.close(callback);
      } else {
        return callback();
      }
    };
    stopMongoose = function(callback) {
      if (mongoose != null) {
        mongoose.models = {};
      }
      if (conn != null) {
        return conn.close(callback);
      } else {
        return callback();
      }
    };
    return async.parallel([stopHttp, stopHttps, stopHttpolyglot, stopMongoose], ready);
  };

  start = function(ready) {
    var addUtilities, config, connectToDatabase, createDirectories, getLogger, logger, models, startWebApp, utilities;
    config = require('./../config/server-config.json');
    getLogger = function(name, level) {
      var log4js, logger, path;
      log4js = require('log4js');
      path = require('path');
      log4js.configure({
        appenders: [
          {
            type: 'console'
          }, {
            type: 'file',
            filename: 'logs' + path.sep + config.logger.filename,
            category: name
          }
        ]
      });
      logger = log4js.getLogger(name);
      logger.setLevel(level);
      return logger;
    };
    logger = getLogger('market-server', config.logger.level);
    logger.info('Starting server...');
    conn = {};
    models = {};
    utilities = {
      checkIsAdmin: function(bankid) {
        var admins;
        admins = config.admins;
        if ((admins.indexOf(bankid)) > -1) {
          return true;
        }
        return false;
      },
      isMoneyFactory: function(bankid) {
        var factories;
        factories = config.money_factory;
        if ((factories.indexOf(bankid)) > -1) {
          return true;
        }
        return false;
      },
      displayUser: function(username, bankid) {
        return username + ' (#' + bankid + ')';
      },
      isValidUsernameFormat: function(username) {
        var max_length, min_length;
        min_length = 3;
        max_length = 16;
        if (username !== username.trim()) {
          return false;
        }
        if (username.indexOf('  ') > -1) {
          return false;
        }
        if (!/^[a-zA-Z0-9_ ]*$/g.test(username)) {
          return false;
        }
        if (!(username.length >= min_length && username.length <= max_length)) {
          return false;
        }
        return true;
      },
      isValidBankIdFormat: function(bankid) {
        var max_length, min_length;
        min_length = 3;
        max_length = 16;
        if (!/^[a-zA-Z0-9_]*$/g.test(bankid)) {
          return false;
        }
        if (!(bankid.length >= min_length && bankid.length <= max_length)) {
          return false;
        }
        return true;
      },
      isValidTaglineFormat: function(tagline) {
        var max_length, min_length;
        min_length = 0;
        max_length = 32;
        if (!(tagline.length >= min_length && tagline.length <= max_length)) {
          return false;
        }
        return true;
      },
      isValidItemData: function(item) {
        var ref, ref1, ref2;
        if (((ref = item.name) != null ? ref.length : void 0) > 32) {
          return false;
        }
        if (((ref1 = item.description) != null ? ref1.length : void 0) > 140) {
          return false;
        }
        if (((ref2 = item.instructions) != null ? ref2.length : void 0) > 140) {
          return false;
        }
        return true;
      },
      calculateTax: function(amount) {
        return Math.ceil(parseFloat(amount) * config.tax.rate * 100) / 100;
      },
      calculateTotal: function(amount) {
        return amount + utilities.calculateTax(amount);
      },
      getShortId: function() {
        var shortid;
        shortid = require('shortid');
        return shortid.generate();
      }
    };
    createDirectories = function(callback) {
      var createDirectory, fs, required_directories;
      fs = require('fs-extra');
      required_directories = ['keys', 'logs', 'user-content/item-images', 'modules/data'];
      createDirectory = function(directory, callback) {
        return fs.ensureDir(directory, function(err) {
          if (err != null) {
            logger.error(err);
          }
          logger.trace('Ensured ' + directory);
          return callback();
        });
      };
      return async.each(required_directories, createDirectory, function() {
        logger.info('Created required directories');
        return callback();
      });
    };
    connectToDatabase = function(callback) {
      var Schema, database_url, schemas, setModels, setSchemas;
      mongoose = require('mongoose');
      Schema = mongoose.Schema;
      conn = mongoose.connection;
      schemas = {};
      setSchemas = function() {
        schemas.items = new Schema({
          id: String,
          owner: String,
          name: String,
          description: String,
          price: Number,
          quantity: Number,
          instructions: String,
          image: String,
          forSale: Boolean,
          quicklink: String
        }, {
          collection: 'items'
        });
        schemas.transactions = new Schema({
          from: String,
          to: String,
          date: Date,
          amount: Number,
          memo: String,
          generated: Boolean
        }, {
          collection: 'transactions'
        });
        schemas.users = new Schema({
          id: String,
          username: String,
          username_lower: String,
          bankid: String,
          password: String,
          balance: Number,
          tagline: String,
          trusted: Boolean,
          taxExempt: Boolean,
          enableWhitelist: Boolean,
          whitelistedUsers: [String]
        }, {
          collection: 'users'
        });
        schemas.quicklinks = new Schema({
          link: String,
          item: String,
          payment: {
            to: String,
            amount: Number,
            memo: String
          }
        }, {
          collection: 'quicklinks'
        });
        return schemas.receipts = new Schema({
          id: String,
          proof: String,
          buyer: String,
          seller: String,
          recipient: String,
          date: Date,
          item: {
            name: String,
            quantity: Number,
            description: String,
            instructions: String
          }
        }, {
          collection: 'receipts'
        });
      };
      setSchemas();
      setModels = function() {
        models.users = mongoose.model('user', schemas.users);
        models.items = mongoose.model('items', schemas.items);
        models.transactions = mongoose.model('transactions', schemas.transactions);
        models.quicklinks = mongoose.model('quicklinks', schemas.quicklinks);
        return models.receipts = mongoose.model('receipts', schemas.receipts);
      };
      setModels();
      database_url = 'mongodb://' + config.mongodb.host + ':' + config.mongodb.port + '/' + config.mongodb.database;
      logger.debug('Connecting to database ' + database_url);
      mongoose.connect(database_url);
      conn.once('error', function(err) {
        logger.error('Error connecting to database');
        return callback(err);
      });
      return conn.once('open', function() {
        logger.info('Successfully connected to database');
        return callback();
      });
    };
    addUtilities = function(callback) {
      var addTaxRecipient;
      utilities.idToUser = function(id, callback) {
        return models.users.findOne({
          _id: id
        }).exec(function(err, user) {
          return callback(user);
        });
      };
      utilities.nameToUser = function(name, callback) {
        if ((name.charAt(0)) === '#') {
          return models.users.findOne({
            bankid: name.toLowerCase().substring(1)
          }).exec(function(err, user) {
            return callback(user);
          });
        } else {
          return models.users.findOne({
            username_lower: name.toLowerCase()
          }).exec(function(err, user) {
            return callback(user);
          });
        }
      };
      utilities.isUsernameAvailable = function(username, callback) {
        return models.users.findOne({
          username_lower: username.toLowerCase()
        }).lean().exec(function(err, user) {
          if (user != null) {
            return callback(false);
          } else {
            return callback(true);
          }
        });
      };
      utilities.hasEnoughFunds = function(user, amount) {
        if ((user.balance / 100) >= amount) {
          return true;
        }
        return false;
      };
      utilities.sendMoney = function(from, to, amount, memo, generated, callback) {
        var getFrom, getTo, transferMoney;
        getFrom = function(callback) {
          return utilities.nameToUser(from, function(user) {
            from = user;
            return callback();
          });
        };
        getTo = function(callback) {
          return utilities.nameToUser(to, function(user) {
            to = user;
            if (to != null) {
              return callback();
            } else {
              return callback('Could not find recipient');
            }
          });
        };
        transferMoney = function(callback) {
          var adjustBalance, makePayment;
          if (to._id.toString() === from._id.toString()) {
            return callback('You can\'t send money to yourself');
          }
          if (to.enableWhitelist && (!(to.whitelistedUsers.indexOf(from._id.toString()) > -1))) {
            return callback('The user you are trying to send to is not accepting money from you');
          }
          if (!(amount > 0)) {
            if (amount === 0) {
              return callback();
            }
            return callback('Must send at least $0');
          }
          if (!(((utilities.hasEnoughFunds(from, utilities.calculateTotal(amount))) || (from.taxExempt && (utilities.hasEnoughFunds(from, amount)))) || (utilities.isMoneyFactory(from.bankid)))) {
            return callback('Not enough funds');
          }
          adjustBalance = function(user, change, callback) {
            if (!utilities.isMoneyFactory(user.bankid)) {
              user.balance = user.balance + (change * 100);
              return user.save(callback);
            } else {
              return callback();
            }
          };
          makePayment = function(from, to, amount, memo, generated, callback) {
            return async.parallel([
              function(callback) {
                return adjustBalance(from, -1 * amount, callback);
              }, function(callback) {
                return adjustBalance(to, amount, callback);
              }, function(callback) {
                var transaction;
                transaction = new models.transactions({
                  from: from._id,
                  to: to._id,
                  amount: amount,
                  memo: memo,
                  date: Date.now(),
                  generated: generated
                });
                return transaction.save(callback);
              }
            ], callback);
          };
          return async.series([
            function(callback) {
              if (!from.taxExempt) {
                return makePayment(from, utilities.tax_recipient, utilities.calculateTax(amount), (config.tax.rate * 100) + '% tax', true, callback);
              } else {
                return callback();
              }
            }, function(callback) {
              return makePayment(from, to, amount, memo, generated, callback);
            }
          ], callback);
        };
        return async.series([getFrom, getTo, transferMoney], callback);
      };
      utilities.buyItem = function(item, quantity, buyer, callback) {
        var addReceipt, convertItem, convertUser, decreaseItemQuantity, getItemOwner, itemOwner, makePayment;
        convertItem = function(callback) {
          return models.items.findOne({
            _id: item,
            forSale: true,
            quantity: {
              $gt: 0
            }
          }).exec(function(err, data) {
            if (data == null) {
              return callback('Could not find item');
            }
            item = data;
            return callback();
          });
        };
        convertUser = function(callback) {
          return utilities.idToUser(buyer, function(user) {
            if (user == null) {
              return callback('Could not find user');
            }
            buyer = user;
            return callback();
          });
        };
        itemOwner = null;
        getItemOwner = function(callback) {
          return utilities.idToUser(item.owner, function(user) {
            if (user == null) {
              return callback('Could not find user');
            }
            itemOwner = user;
            return callback();
          });
        };
        makePayment = function(callback) {
          return utilities.sendMoney('#' + buyer.bankid, '#' + itemOwner.bankid, item.price * quantity, 'Purchase of ' + item.name, true, function(err) {
            if (err != null) {
              return callback(err);
            } else {
              return callback();
            }
          });
        };
        decreaseItemQuantity = function(callback) {
          item.quantity = item.quantity - quantity;
          return item.save(callback);
        };
        addReceipt = function(callback) {
          var receipt;
          receipt = new models.receipts({
            proof: utilities.getShortId(),
            buyer: buyer._id,
            seller: itemOwner._id,
            date: Date.now(),
            item: {
              name: item.name,
              quantity: quantity,
              description: item.description != null ? item.description : '',
              instructions: item.instructions != null ? item.instructions : ''
            }
          });
          return receipt.save(callback);
        };
        return async.series([convertItem, convertUser, getItemOwner, makePayment, decreaseItemQuantity, addReceipt], callback);
      };
      utilities.addItem = function(owner, item, callback) {
        var generateQuicklink, getRandomImage, image, item_document, quicklink, saveItem, saveQuicklink, setImageURL;
        quicklink = null;
        image = null;
        item_document = null;
        getRandomImage = function() {
          var images, prefix, random, suffix;
          prefix = '/static/img/items/';
          images = ['black', 'blue', 'cyan', 'gray', 'green', 'lightgray', 'magenta', 'pink', 'purple', 'red', 'yellow'];
          suffix = '.jpg';
          random = require('random-to');
          return prefix + images[random.from0upto(images.length)] + suffix;
        };
        generateQuicklink = function(callback) {
          var confirmExists, fs, quicklink_id_number_file, readFile;
          quicklink_id_number_file = __dirname + '/data/quicklink_id_number.json';
          fs = require('fs');
          confirmExists = function(callback) {
            return fs.exists(quicklink_id_number_file, function(exists) {
              if (!exists) {
                return fs.writeFile(quicklink_id_number_file, 0, 'utf-8', callback);
              } else {
                return callback();
              }
            });
          };
          readFile = function(callback) {
            return fs.readFile(quicklink_id_number_file, 'utf-8', function(err, data) {
              var id, id_generator;
              if (err != null) {
                return callback(err);
              }
              id_generator = require('./id-generator');
              id = id_generator.generate(parseInt(data), {
                min_length: 3
              });
              return fs.writeFile(quicklink_id_number_file, parseInt(data) + 1, 'utf-8', function(err) {
                if (err != null) {
                  return callback(err);
                }
                quicklink = id;
                return callback();
              });
            });
          };
          return async.series([confirmExists, readFile], callback);
        };
        saveItem = function(callback) {
          item_document = new models.items({
            owner: owner,
            name: item.name,
            description: item.description,
            price: item.price,
            quantity: item.quantity,
            instructions: item.instructions,
            image: getRandomImage(),
            forSale: item.forSale,
            quicklink: quicklink
          });
          return item_document.save(callback);
        };
        setImageURL = function(callback) {
          if ((item.image != null) && (item.image !== '')) {
            return utilities.saveImage(item.image, item_document._id, function(err) {
              if (err == null) {
                item_document.image = 'user-content/item-images?id=' + item_document._id;
                return item_document.save(callback);
              } else {
                return callback(err);
              }
            });
          } else {
            return callback();
          }
        };
        saveQuicklink = function(callback) {
          var quicklink_document;
          quicklink_document = new models.quicklinks({
            link: quicklink,
            item: item_document._id
          });
          return quicklink_document.save(callback);
        };
        return async.series([generateQuicklink, saveItem, setImageURL, saveQuicklink], callback);
      };
      utilities.saveImage = function(image, name, callback) {
        var extension, filetype, fs, ref, ref1;
        fs = require('fs');
        if ((image != null ? (ref = image.split(':')[1]) != null ? (ref1 = ref.split('/')[1]) != null ? ref1.split(';')[0] : void 0 : void 0 : void 0) == null) {
          return callback('Could not save image');
        }
        filetype = image.split(':')[1].split('/')[0];
        extension = image.split(':')[1].split('/')[1].split(';')[0];
        if ((filetype === 'image') && (extension === 'png' || extension === 'jpeg')) {
          return fs.writeFile(__dirname + '/../user-content/item-images/' + name, image.split(',')[1], 'base64', function(err) {
            return callback(err);
          });
        }
      };
      utilities.verifyPassword = function(user, password, callback) {
        var passwordHasher;
        passwordHasher = require('password-hash-and-salt');
        return passwordHasher(password).verifyAgainst(user.password, function(err, verified) {
          if (verified) {
            return callback(true);
          } else {
            return callback(false);
          }
        });
      };
      utilities.deleteUser = function(user, callback) {
        var convertUser, deleteItems, deleteUser, makeTaxExepmt, moveMoney;
        convertUser = function(callback) {
          return utilities.idToUser(user, function(data) {
            if (data != null) {
              user = data;
              return callback();
            } else {
              return callback('Could not find user');
            }
          });
        };
        deleteItems = function(callback) {
          return models.items.find({
            owner: user._id
          }).remove(function(err) {
            return callback(err);
          });
        };
        makeTaxExepmt = function(callback) {
          user.taxExempt = true;
          return user.save(callback);
        };
        moveMoney = function(callback) {
          return utilities.sendMoney('#' + user.bankid, '#' + utilities.tax_recipient.bankid, user.balance / 100, 'Account deletion for #' + user.bankid, true, callback);
        };
        deleteUser = function(callback) {
          return user.remove(function(err) {
            return callback(err);
          });
        };
        return async.series([convertUser, deleteItems, makeTaxExepmt, moveMoney, deleteUser], callback);
      };
      addTaxRecipient = function(callback) {
        return models.users.findOne({
          bankid: config.tax.recipient
        }).exec(function(err, user) {
          if (user != null) {
            logger.info('Tax recipient successfully found: ' + utilities.displayUser(user.username, user.bankid));
            utilities.tax_recipient = user;
          } else {
            logger.warn('Tax recipient user could not be found');
          }
          return callback();
        });
      };
      return async.parallel([addTaxRecipient], function(err) {
        if (err == null) {
          logger.debug('Utilities added');
        }
        return callback(err);
      });
    };
    startWebApp = function(callback) {
      var app, configureExpress, express, passwordHasher, startWebServer;
      express = require('express');
      app = express();
      passwordHasher = require('password-hash-and-salt');
      configureExpress = function(callback) {
        var LocalStrategy, bodyParser, fieldSelector, flash, passport, session;
        session = require('express-session');
        app.use(session({
          secret: 'keyboard cat',
          resave: true,
          saveUninitialized: false
        }));
        passport = require('passport');
        LocalStrategy = require('passport-local').Strategy;
        passport.use(new LocalStrategy({
          passReqToCallback: true
        }, function(req, username, password, done) {
          var getUser, loginFail, user, verifyPassword;
          username = username.toLowerCase();
          user = {};
          loginFail = function() {
            logger.info(username + ' failed to log in');
            return done(null, false, {
              message: 'Incorrect username or password'
            });
          };
          getUser = function(callback) {
            return utilities.nameToUser(username.trim(), function(found_user) {
              if (found_user != null) {
                user = found_user;
                return callback();
              } else {
                loginFail();
                return callback('failed to log in');
              }
            });
          };
          verifyPassword = function(callback) {
            return passwordHasher(password).verifyAgainst(user.password, function(err, verified) {
              if (err != null) {
                logger.error(err);
                loginFail();
                return callback(err);
              } else {
                if (verified) {
                  logger.info(username + ' successfully logged in');
                  done(null, user);
                } else {
                  loginFail();
                }
                return callback();
              }
            });
          };
          return async.series([getUser, verifyPassword]);
        }));
        passport.serializeUser(function(user, done) {
          return done(null, user._id);
        });
        passport.deserializeUser(function(id, done) {
          return models.users.findOne({
            _id: id
          }, function(err, user) {
            return done(err, user);
          });
        });
        app.use(passport.initialize());
        app.use(passport.session());
        bodyParser = require('body-parser');
        app.use(bodyParser.json({
          limit: '5mb'
        }));
        app.use(bodyParser.urlencoded({
          limit: '5mb',
          extended: true
        }));
        flash = require('connect-flash');
        app.use(flash());
        fieldSelector = require('./field-selector');
        session = require('express-session');
        app.use(session({
          secret: 'keyboard cat',
          resave: true,
          saveUninitialized: false
        }));
        app.use('/static', express["static"]('webcontent'));
        app.get('/user-content/item-images', function(req, res) {
          return res.sendFile('user-content/item-images/' + req.query.id, {
            root: './'
          });
        });
        app.get('/api/stats', function(req, res) {
          var calculateTotalMoney, getNumberOfUsers, numberOfUsers, totalMoney;
          res.set('Content-Type', 'text/json');
          numberOfUsers = 0;
          getNumberOfUsers = function(callback) {
            return models.users.find({}).count().exec(function(err, count) {
              numberOfUsers = count;
              return callback(err);
            });
          };
          totalMoney = 0;
          calculateTotalMoney = function(callback) {
            return models.users.find({}).lean().exec(function(err, users) {
              var i, len, user;
              for (i = 0, len = users.length; i < len; i++) {
                user = users[i];
                totalMoney += user.balance / 100;
              }
              return callback(err);
            });
          };
          return async.series([getNumberOfUsers, calculateTotalMoney], function(err) {
            return res.send({
              totalMoney: totalMoney,
              numberOfUsers: numberOfUsers
            });
          });
        });
        app.get('/api/config', function(req, res) {
          res.set('Content-Type', 'text/json');
          return res.send(fieldSelector.selectWithQueryString(req.query.fields, {
            title: config.page_text.title,
            footer: config.page_text.footer,
            captcha_site_key: config.captcha.site_key
          }));
        });
        app.post('/api/admin/edit-user', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (!(utilities.checkIsAdmin(req.user.bankid))) {
            return res.send({
              success: false,
              message: 'Insufficient privileges'
            });
          }
          return utilities.idToUser(req.body.user._id, function(user) {
            var saveUser, updatePassword;
            if (user == null) {
              return res.send({
                success: false,
                message: 'Could not find user'
              });
            }
            if (req.body.user.username != null) {
              user.username = req.body.user.username;
              user.username_lower = req.body.user.username.toLowerCase();
            }
            if (req.body.user.balance != null) {
              user.balance = req.body.user.balance * 100;
            }
            if (req.body.user.tagline != null) {
              user.tagline = req.body.user.tagline;
            }
            if (req.body.user.bankid != null) {
              user.bankid = req.body.user.bankid;
            }
            if (req.body.user.trusted != null) {
              user.trusted = req.body.user.trusted;
            }
            if (req.body.user.taxExempt != null) {
              user.taxExempt = req.body.user.taxExempt;
            }
            updatePassword = function(callback) {
              if (req.body.user.password != null) {
                return passwordHasher(req.body.user.password).hash(function(err, hash) {
                  if (err == null) {
                    user.password = hash;
                  }
                  return callback(err);
                });
              } else {
                return callback();
              }
            };
            saveUser = function(callback) {
              return user.save(function(err) {
                return callback(err);
              });
            };
            return async.series([updatePassword, saveUser], function(err) {
              if (err != null) {
                return res.send({
                  success: false,
                  message: err
                });
              } else {
                logger.info('Admin ' + utilities.displayUser(req.user.username, req.user.bankid) + ' edited the information for ' + utilities.displayUser(user.username, user.bankid));
                return res.send({
                  success: true
                });
              }
            });
          });
        });
        app.get('/api/math/calculate-tax', function(req, res) {
          var tax;
          res.set('Content-Type', 'text/json');
          tax = utilities.calculateTax(parseFloat(req.query.amount));
          return res.send(tax.toString());
        });
        app.post('/api/signin', passport.authenticate('local', {
          successRedirect: '/#/profile',
          failureRedirect: '/signin',
          failureFlash: true
        }));
        app.post('/api/createaccount', function(req, res) {
          var createAccount, respond, verifyCaptcha;
          respond = function(status) {
            if (status.success) {
              logger.info(req.ip + ' created a new account');
              return res.redirect('/signin');
            } else {
              req.flash('message', status.message);
              return res.redirect('/createaccount');
            }
          };
          verifyCaptcha = function(callback) {
            var recaptcha_response, request;
            if (!config.captcha.enabled) {
              return callback();
            } else {
              request = require('request');
              recaptcha_response = req.body['g-recaptcha-response'];
              return request.post('https://www.google.com/recaptcha/api/siteverify', {
                form: {
                  secret: config.captcha.secret_key,
                  response: recaptcha_response
                }
              }, function(err, res, body) {
                body = JSON.parse(body);
                if (body.success) {
                  return callback();
                } else {
                  return callback('Could not verify captcha');
                }
              });
            }
          };
          createAccount = function(callback) {
            var createUser, hashPassword;
            logger.trace('Creating an account...');
            hashPassword = function(callback) {
              return passwordHasher(req.body['password']).hash(function(err, hash) {
                if (err != null) {
                  return callback(err);
                } else {
                  logger.trace('Hashed password');
                  return callback(null, hash);
                }
              });
            };
            createUser = function(credentials, callback) {
              var saveUser, verifyCredentials;
              verifyCredentials = function(credentials, callback) {
                var bankid, username;
                logger.trace('Verifying credentials...');
                bankid = credentials.bankid;
                username = credentials.username;
                if (!(utilities.isValidBankIdFormat(bankid))) {
                  return callback('Invalid Bank ID');
                }
                if (!(utilities.isValidUsernameFormat(username))) {
                  return callback('Invalid username');
                }
                logger.trace('Credentials meet requirements, now checking if available...');
                return models.users.findOne({
                  $or: [
                    {
                      username_lower: username.toLowerCase()
                    }, {
                      bankid: bankid
                    }
                  ]
                }).lean().count(function(err, count) {
                  logger.trace('Count obtained and is ' + count);
                  if (count > 0) {
                    logger.trace('Username or Bank ID is taken');
                    return callback('Username or Bank ID is taken');
                  } else {
                    logger.trace('Credentials verified');
                    return callback();
                  }
                });
              };
              saveUser = function(credentials, callback) {
                var user;
                logger.trace('Saving user to database...');
                user = new models.users({
                  username: credentials.username,
                  username_lower: credentials.username.toLowerCase(),
                  password: credentials.password_hash,
                  bankid: credentials.bankid,
                  balance: 0,
                  tagline: config.default_tagline,
                  trusted: false,
                  taxExempt: false,
                  enableWhitelist: false,
                  whitelistedUsers: []
                });
                return user.save(function(err) {
                  if (err != null) {
                    logger.error('Error saving to database: ' + err);
                    return callback(err);
                  } else {
                    logger.trace('User saved to database');
                    return callback();
                  }
                });
              };
              return verifyCredentials(credentials, function(err) {
                if (err != null) {
                  return respond({
                    success: false,
                    message: err
                  });
                } else {
                  return saveUser(credentials, function(err) {
                    if (err != null) {
                      return respond({
                        success: false,
                        message: err
                      });
                    } else {
                      logger.debug('Account created for ' + credentials.username);
                      return callback();
                    }
                  });
                }
              });
            };
            return async.waterfall([
              hashPassword, function(hash, callback) {
                return createUser({
                  username: req.body.username.trim(),
                  password_hash: hash,
                  bankid: req.body.bankid.toLowerCase().trim()
                }, callback);
              }
            ], callback);
          };
          return async.series([verifyCaptcha, createAccount], function(err) {
            if (err != null) {
              return respond({
                success: false,
                message: err
              });
            }
            return respond({
              success: true
            });
          });
        });
        app.post('/api/send', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user != null) {
            return utilities.sendMoney('#' + req.user.bankid, req.body.to, req.body.amount, req.body.memo, false, function(err) {
              if (err != null) {
                return res.send({
                  success: false,
                  message: err
                });
              } else {
                return res.send({
                  success: true,
                  message: 'Sent $' + req.body.amount.toLocaleString() + ' to ' + req.body.to
                });
              }
            });
          } else {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
        });
        app.post('/api/buy', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
          return utilities.buyItem(req.body.item, req.body.quantity, req.user._id, function(err) {
            if (err != null) {
              return res.send({
                success: false,
                message: err
              });
            } else {
              return res.send({
                success: true,
                message: 'Item purchased, view receipt on the "Receipts" page'
              });
            }
          });
        });
        app.post('/api/account/username', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user != null) {
            if (!(utilities.isValidUsernameFormat(req.body.username))) {
              return res.send({
                success: false,
                message: 'Invalid username'
              });
            }
            return utilities.isUsernameAvailable(req.body.username, function(result) {
              if (result || (req.body.username.toLowerCase() === req.user.username_lower)) {
                return models.users.findOne({
                  _id: req.user._id
                }).exec(function(err, user) {
                  if (user != null) {
                    user.username = req.body.username;
                    user.username_lower = req.body.username.toLowerCase();
                    return user.save(function() {
                      return res.send({
                        success: true
                      });
                    });
                  } else {
                    return res.send({
                      success: false,
                      message: 'Could not find user in database'
                    });
                  }
                });
              } else {
                return res.send({
                  success: false,
                  message: 'Username not available'
                });
              }
            });
          } else {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
        });
        app.post('/api/account/password', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user != null) {
            return models.users.findOne({
              _id: req.user._id
            }).exec(function(err, user) {
              if (user != null) {
                return passwordHasher(req.body.password).hash(function(err, hash) {
                  if (err != null) {
                    return res.send({
                      success: false,
                      message: 'Error hashing password'
                    });
                  } else {
                    logger.trace('Hashed password');
                    user.password = hash;
                    return user.save(function() {
                      return res.send({
                        success: true
                      });
                    });
                  }
                });
              } else {
                return res.send({
                  success: false,
                  message: 'Could not find user in database'
                });
              }
            });
          } else {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
        });
        app.post('/api/account/tagline', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
          if (!utilities.isValidTaglineFormat(req.body.tagline)) {
            return res.send({
              success: false,
              message: 'Invalid tagline'
            });
          }
          return utilities.idToUser(req.user._id, function(user) {
            user.tagline = req.body.tagline;
            return user.save(function() {
              return res.send({
                success: true
              });
            });
          });
        });
        app.post('/api/account/whitelist', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
          return utilities.idToUser(req.user._id, function(user) {
            user.enableWhitelist = req.body.enabled;
            user.whitelistedUsers = req.body.users;
            return user.save(function(err) {
              if (err != null) {
                return res.send({
                  success: false,
                  message: err
                });
              }
              return res.send({
                success: true
              });
            });
          });
        });
        app.post('/api/item/add', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
          if (!(utilities.isValidItemData(req.body.item))) {
            return res.send({
              success: false,
              message: 'Invalid field(s)'
            });
          }
          return utilities.addItem(req.user._id, req.body.item, function(err) {
            if (err != null) {
              return res.send({
                success: false,
                message: err
              });
            } else {
              return res.send({
                success: true
              });
            }
          });
        });
        app.post('/api/item/edit', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
          if (!(utilities.isValidItemData(req.body.item))) {
            return res.send({
              success: false,
              message: 'Invalid field(s)'
            });
          }
          return models.items.findOne({
            _id: req.body.item._id,
            owner: req.user._id
          }).exec(function(err, item) {
            var saveImage, saveItem;
            if (item == null) {
              return res.send({
                success: false,
                message: 'Could not find item'
              });
            }
            item.name = req.body.item.name;
            item.description = req.body.item.description;
            item.price = req.body.item.price;
            item.quantity = req.body.item.quantity;
            item.instructions = req.body.item.instructions;
            item.forSale = req.body.item.forSale;
            saveImage = function(callback) {
              if ((req.body.item.image != null) && (req.body.item.image !== '')) {
                return utilities.saveImage(req.body.item.image, item._id, function(err) {
                  if (err == null) {
                    item.image = '/user-content/item-images/?id=' + item._id;
                  }
                  return callback();
                });
              } else {
                return callback();
              }
            };
            saveItem = function(callback) {
              return item.save(function() {
                return res.send({
                  success: true
                });
              });
            };
            return async.series([saveImage, saveItem]);
          });
        });
        app.post('/api/item/delete', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
          return models.items.findOne({
            _id: req.body.item._id,
            owner: req.user._id
          }).exec(function(err, item) {
            if (item == null) {
              return res.send({
                success: false,
                message: 'Could not find item'
              });
            }
            return item.remove(function() {
              return res.send({
                success: true
              });
            });
          });
        });
        app.post('/api/delete-user', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send({
              success: false,
              message: 'Not signed in'
            });
          }
          if (!((req.body.id === req.user._id.toString()) || (utilities.checkIsAdmin(req.user.bankid)))) {
            return res.send({
              success: false,
              message: 'Insufficient privileges'
            });
          }
          return utilities.deleteUser(req.body.id, function(err) {
            if (err != null) {
              return res.send({
                success: false,
                message: err
              });
            } else {
              return res.send({
                success: true
              });
            }
          });
        });
        app.get('/api/admin/logs', function(req, res) {
          var LineByLineReader, lines, lr;
          if ((req.user != null) && (utilities.checkIsAdmin(req.user.bankid))) {
            if (req.query.lines == null) {
              return res.sendFile('logs/' + config.logger.filename, {
                root: './'
              });
            } else {
              lines = [];
              LineByLineReader = require('line-by-line');
              lr = new LineByLineReader('logs/' + config.logger.filename);
              lr.on('line', function(line) {
                return lines.push(line);
              });
              return lr.on('end', function() {
                res.set('Content-Type', 'text/json');
                return res.send(lines.reverse().slice(0, parseInt(req.query.lines)).reverse());
              });
            }
          } else {
            res.set('Content-Type', 'text/json');
            return res.send(null);
          }
        });
        app.get('/api/buy', function(req, res) {
          var limit, skip;
          res.set('Content-Type', 'text/json');
          limit = req.query.limit != null ? parseInt(req.query.limit) : null;
          skip = req.query.skip != null ? parseInt(req.query.skip) : 0;
          return models.items.find({
            forSale: true,
            quantity: {
              $gt: 0
            }
          }).skip(skip).limit(limit).select('_id owner name price quantity description image forSale quicklink').lean().exec(function(err, data) {
            var convertIdToUsername;
            if (data != null) {
              convertIdToUsername = function(item, callback) {
                return utilities.idToUser(item.owner, function(user) {
                  if (user != null) {
                    item.owner = user.username;
                  } else {
                    item.owner = config.user_not_found;
                  }
                  return callback();
                });
              };
              return async.each(data, convertIdToUsername, function() {
                return res.send(data);
              });
            } else {
              return res.send([]);
            }
          });
        });
        app.get('/api/items', function(req, res) {
          var limit, skip;
          res.set('Content-Type', 'text/json');
          if (req.user != null) {
            limit = req.query.limit != null ? parseInt(req.query.limit) : null;
            skip = req.query.skip != null ? parseInt(req.query.skip) : 0;
            return models.items.find({
              owner: req.user._id
            }).skip(skip).limit(limit).lean().exec(function(err, data) {
              if (data != null) {
                return res.send(data);
              } else {
                return res.send([]);
              }
            });
          } else {
            return res.send(null);
          }
        });
        app.get('/api/user', function(req, res) {
          var convertAndAddToArray, taxRate, whitelistedUsers;
          res.set('Content-Type', 'text/json');
          if (req.user != null) {
            taxRate = config.tax.rate;
            if (req.user.taxExempt) {
              taxRate = 0;
            }
            whitelistedUsers = [];
            convertAndAddToArray = function(id, callback) {
              return utilities.idToUser(id, function(user) {
                if (user != null) {
                  whitelistedUsers.push({
                    username: user.username,
                    bankid: user.bankid,
                    id: user._id
                  });
                }
                return callback();
              });
            };
            return async.eachSeries(req.user.whitelistedUsers, convertAndAddToArray, function(err) {
              return res.send(fieldSelector.selectWithQueryString(req.query.fields, {
                id: req.user._id,
                username: req.user.username,
                bankid: req.user.bankid,
                balance: req.user.balance / 100,
                tagline: req.user.tagline,
                taxRate: taxRate,
                isAdmin: utilities.checkIsAdmin(req.user.bankid),
                trusted: req.user.trusted,
                taxExempt: req.user.taxExempt,
                enableWhitelist: req.user.enableWhitelist,
                whitelistedUsers: whitelistedUsers,
                isMoneyFactory: utilities.isMoneyFactory(req.user.bankid)
              }));
            });
          } else {
            return res.send(null);
          }
        });
        app.get('/api/users', function(req, res) {
          var limit, query, skip;
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send([]);
          }
          limit = req.query.limit != null ? parseInt(req.query.limit) : null;
          skip = req.query.skip != null ? parseInt(req.query.skip) : 0;
          query = {};
          if (req.query.username != null) {
            query.username_lower = req.query.username.toLowerCase();
          }
          if (req.query.bankid != null) {
            query.bankid = req.query.bankid.toLowerCase();
          }
          if (req.query.id != null) {
            query._id = req.query.id;
          }
          if (req.query.search != null) {
            query.$or = [
              {
                username_lower: {
                  $regex: req.query.search.toLowerCase()
                }
              }, {
                bankid: {
                  $regex: req.query.search.toLowerCase()
                }
              }
            ];
          }
          return models.users.find().sort({
            balance: -1
          }).limit(1).lean().exec(function(err, users) {
            var richestUser;
            if (users[0] != null) {
              richestUser = users[0]._id.toString();
              return models.users.find(query).sort({
                balance: -1
              }).skip(skip).limit(limit).select('_id username bankid tagline balance trusted taxExempt enableWhitelist whitelistedUsers').lean().exec(function(err, data) {
                var i, len, user;
                users = [];
                if (data != null) {
                  for (i = 0, len = data.length; i < len; i++) {
                    user = data[i];
                    if (user._id.toString() === richestUser) {
                      user.richest = true;
                    }
                    user.balance = user.balance / 100;
                    if (!((req.query.accepting === 'true' && user.enableWhitelist && ((user.whitelistedUsers.indexOf(req.user._id.toString())) < 0)) || ((req.query.accepting === 'true' || req.query.others === 'true') && user._id.toString() === req.user._id.toString()))) {
                      users.push(user);
                    }
                  }
                  return res.send(users);
                } else {
                  return res.send([]);
                }
              });
            } else {
              return res.send([]);
            }
          });
        });
        app.get('/api/users/ids', function(req, res) {
          var convertBankidToId, users;
          res.set('Content-Type', 'text/json');
          users = JSON.parse(req.query.bankids);
          convertBankidToId = function(bankid, callback) {
            return models.users.findOne({
              bankid: bankid.toLowerCase()
            }).lean().exec(function(err, user) {
              if (user != null) {
                return callback(null, user._id);
              } else {
                return callback('Could not find bankid ' + bankid);
              }
            });
          };
          return async.map(users, convertBankidToId, function(err, ids) {
            if (err == null) {
              return res.send(ids);
            } else {
              return res.send(null);
            }
          });
        });
        app.get('/api/receipts', function(req, res) {
          var limit, skip;
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send(null);
          }
          limit = req.query.limit != null ? parseInt(req.query.limit) : null;
          skip = req.query.skip != null ? parseInt(req.query.skip) : 0;
          return models.receipts.find({
            $or: [
              {
                buyer: req.user._id
              }, {
                seller: req.user._id
              }
            ]
          }).sort({
            date: -1
          }).skip(skip).limit(limit).lean().exec(function(err, data) {
            var convertIdToUsername;
            if (data != null) {
              convertIdToUsername = function(receipt, callback) {
                var convertBuyer, convertDate, convertSeller;
                convertDate = function(callback) {
                  receipt.date = new Date(receipt.date).toString();
                  return callback();
                };
                convertBuyer = function(callback) {
                  return utilities.idToUser(receipt.buyer, function(user) {
                    if (user != null) {
                      receipt.buyer = {
                        username: user.username,
                        bankid: user.bankid
                      };
                    } else {
                      receipt.buyer = {
                        username: config.user_not_found,
                        bankid: config.user_not_found
                      };
                    }
                    return callback();
                  });
                };
                convertSeller = function(callback) {
                  return utilities.idToUser(receipt.seller, function(user) {
                    if (user != null) {
                      receipt.seller = {
                        username: user.username,
                        bankid: user.bankid
                      };
                    } else {
                      receipt.seller = {
                        username: config.user_not_found,
                        bankid: config.user_not_found
                      };
                    }
                    return callback();
                  });
                };
                return async.parallel([convertDate, convertBuyer, convertSeller], callback);
              };
              return async.each(data, convertIdToUsername, function() {
                return res.send(data);
              });
            } else {
              return res.send([]);
            }
          });
        });
        app.get('/api/transactions', function(req, res) {
          var limit, query, skip;
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send(null);
          }
          limit = req.query.limit != null ? parseInt(req.query.limit) : null;
          skip = req.query.skip != null ? parseInt(req.query.skip) : 0;
          query = {
            $or: [
              {
                to: req.user._id
              }, {
                from: req.user._id
              }
            ]
          };
          if (req.query.type != null) {
            if (req.query.type === 'incoming') {
              query = {
                to: req.user._id
              };
            } else if (req.query.type === 'outgoing') {
              query = {
                from: req.user._id
              };
            }
          }
          return models.transactions.find(query).sort({
            date: -1
          }).skip(skip).limit(limit).lean().exec(function(err, data) {
            var convertIdToUsername;
            if (data != null) {
              convertIdToUsername = function(transaction, callback) {
                var convertFrom, convertTo;
                transaction.date = new Date(transaction.date).toString();
                convertTo = function(callback) {
                  return utilities.idToUser(transaction.to, function(user) {
                    if (user != null) {
                      transaction.to = {
                        username: user.username,
                        bankid: user.bankid
                      };
                    } else {
                      transaction.to = {
                        username: config.user_not_found,
                        bankid: config.user_not_found
                      };
                    }
                    return callback();
                  });
                };
                convertFrom = function(callback) {
                  return utilities.idToUser(transaction.from, function(user) {
                    if (user != null) {
                      transaction.from = {
                        username: user.username,
                        bankid: user.bankid
                      };
                    } else {
                      transaction.from = {
                        username: config.user_not_found,
                        bankid: config.user_not_found
                      };
                    }
                    return callback();
                  });
                };
                return async.parallel([convertTo, convertFrom], callback);
              };
              return async.each(data, convertIdToUsername, function() {
                return res.send(data);
              });
            } else {
              return res.send([]);
            }
          });
        });
        app.get('/api/transactions/count', function(req, res) {
          res.set('Content-Type', 'text/json');
          if (req.user == null) {
            return res.send(null);
          }
          return models.transactions.find(models.transactions.find({
            $or: [
              {
                to: req.user._id
              }, {
                from: req.user._id
              }
            ]
          })).count(function(err, count) {
            if (err == null) {
              return res.send({
                count: count
              });
            } else {
              return res.send(null);
            }
          });
        });
        app.get('/api/quicklink', function(req, res) {
          var convertIdToUsername, convertToItem, getItemByQuicklink;
          res.set('Content-Type', 'text/json');
          if ((req.query.link.charAt(0)) === '@') {
            req.query.link = req.query.link.substring(1);
          }
          getItemByQuicklink = function(link, callback) {
            return models.quicklinks.findOne({
              link: req.query.link
            }).lean().exec(function(err, quicklink) {
              if (quicklink != null) {
                return callback(null, quicklink.item);
              } else {
                return callback('Cannot find quicklink');
              }
            });
          };
          convertToItem = function(item_id, callback) {
            return models.items.findOne({
              _id: item_id,
              forSale: true
            }).lean().exec(function(err, item) {
              if (item != null) {
                return callback(null, item);
              } else {
                return callback('Cannot find item');
              }
            });
          };
          convertIdToUsername = function(item, callback) {
            if (item == null) {
              return callback(null, item);
            }
            return utilities.idToUser(item.owner, function(user) {
              if (user != null) {
                item.owner = user.username;
              } else {
                item.owner = config.user_not_found;
              }
              return callback(null, item);
            });
          };
          return async.waterfall([
            function(callback) {
              return getItemByQuicklink(req.query.link, callback);
            }, convertToItem, convertIdToUsername
          ], function(err, result) {
            return res.send({
              item: result
            });
          });
        });
        app.get('/signin', function(req, res) {
          if (req.user == null) {
            return res.render('signin.jade', {
              message: req.flash('error'),
              title: config.page_text.title,
              footer: config.page_text.footer
            });
          } else {
            return res.redirect('/');
          }
        });
        app.get('/signout', function(req, res) {
          if (req.user != null) {
            logger.info(utilities.displayUser(req.user.username, req.user.bankid) + ' signed out from ' + req.ip);
            req.logout();
          }
          return res.redirect('/signin');
        });
        app.get('/createaccount', function(req, res) {
          var captchadisplay, captchakey;
          if (req.user == null) {
            captchadisplay = config.captcha.enabled ? 'inline' : 'none';
            captchakey = config.captcha.site_key ? config.captcha.site_key : 'none';
            return res.render('createaccount.jade', {
              message: req.flash('message'),
              username: req.flash('username'),
              bankid: req.flash('bankid'),
              captchadisplay: captchadisplay,
              captchakey: captchakey,
              title: config.page_text.title,
              footer: config.page_text.footer
            });
          } else {
            return res.redirect('/');
          }
        });
        app.get('/', function(req, res) {
          if (req.user != null) {
            return res.render('index.jade', {
              title: config.page_text.title,
              bankid: req.user.bankid
            });
          } else {
            return res.redirect('/signin');
          }
        });
        app.get('/jade/:name', function(req, res) {
          if (req.user != null) {
            return res.render(req.params.name, {
              title: config.page_text.title,
              bankid: req.user.bankid
            });
          } else {
            return res.redirect('/signin');
          }
        });
        return callback();
      };
      startWebServer = function(callback) {
        var fs, https_options, logReadyMessage, startHttpServer, startHttpolyglotServer, startHttpsServer;
        logReadyMessage = function(port, protocol) {
          return logger.info('Server listening on port ' + port + ' (' + protocol + ')');
        };
        startHttpServer = function(callback) {
          var http;
          http = require('http');
          http_server = http.createServer(app);
          return http_server.listen(config.port.http, function() {
            logReadyMessage(config.port.http, 'http');
            return callback();
          });
        };
        if (config.https.enabled) {
          fs = require('fs');
          https_options = {
            key: fs.readFileSync(config.https.key),
            cert: fs.readFileSync(config.https.cert),
            ciphers: 'HIGH'
          };
          startHttpsServer = function(callback) {
            var https;
            https = require('https');
            https_server = https.createServer(https_options, app);
            return https_server.listen(config.port.https, function() {
              logReadyMessage(config.port.https, 'https');
              return callback();
            });
          };
          startHttpolyglotServer = function(callback) {
            var httpolyglot;
            httpolyglot = require('httpolyglot');
            httpolyglot_server = httpolyglot.createServer(https_options, app);
            return httpolyglot_server.listen(config.port.https, function() {
              logReadyMessage(config.port.http, 'http');
              logReadyMessage(config.port.https, 'https');
              return callback();
            });
          };
          if (config.port.http === config.port.https) {
            return async.parallel([startHttpolyglotServer], callback);
          } else {
            return async.parallel([startHttpServer, startHttpServer], callback);
          }
        } else {
          return async.parallel([startHttpServer], callback);
        }
      };
      return async.series([configureExpress, startWebServer], callback);
    };
    return async.series([createDirectories, connectToDatabase, addUtilities, startWebApp], ready);
  };

  module.exports.start = start;

  module.exports.stop = stop;

}).call(this);
