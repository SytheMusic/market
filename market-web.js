// Generated by CoffeeScript 1.10.0
(function() {
  var async, start;

  async = require('async');

  start = function(ready) {
    var config, getLogger, loadServerConfig, logger, server_config, startWebApp;
    config = require('./web-config.json');
    getLogger = function(name, level) {
      var log4js, logger;
      log4js = require('log4js');
      log4js.configure({
        appenders: [
          {
            type: 'console'
          }, {
            type: 'file',
            filename: 'logs/' + config.logger.filename,
            category: name
          }
        ]
      });
      logger = log4js.getLogger(name);
      logger.setLevel(level);
      return logger;
    };
    logger = getLogger('market-web', config.logger.level);
    server_config = {};
    loadServerConfig = function(callback) {
      var request;
      request = require('request');
      return request.get(config.market_server_host, function(err, res, body) {
        if (err != null) {
          logger.error(err);
          return callback(err);
        } else {
          server_config = JSON.parse(body);
          return callback();
        }
      });
    };
    startWebApp = function(callback) {
      var app, configureExpress, express, startWebServer;
      express = require('express');
      app = express();
      configureExpress = function(callback) {
        var bodyParser, flash;
        bodyParser = require('body-parser');
        app.use(bodyParser.json({
          limit: '5mb'
        }));
        app.use(bodyParser.json({
          limit: '5mb',
          extended: true
        }));
        flash = require('connect-flash');
        app.use(flash());
        app.use('/static', express["static"]('webcontent'));
        app.get('/signin', function(req, res) {
          if (!signed_in) {
            return res.render('signin.jade', {
              message: req.flash('error')
            });
          } else {
            return res.redirect('/');
          }
        });
        app.get('/', function(req, res) {
          if (signed_in) {
            res.render('index.jade');
          } else {
            res.redirect('/signin');
          }
          return res.render('index.jade');
        });
        app.get('/jade/:name', function(req, res) {
          if (signed_in) {
            return res.render(req.params.name, {
              title: market_title,
              bankid: req.user.bankid
            });
          } else {
            return res.redirect('/signin');
          }
        });
        return callback();
      };
      startWebServer = function(callback) {
        var fs, https_options, startHttpServer, startHttpolyglotServer, startHttpsServer;
        startHttpServer = function(callback) {
          var http, http_server;
          http = require('http');
          http_server = http.createServer(app);
          return http_server.listen(config.port.http, function() {
            logger.debug('App listening on port ' + config.port.https + ' (http)');
            return callback();
          });
        };
        if (config.https.enabled) {
          fs = require('fs');
          https_options = {
            key: fs.readFileSync(config.https.key),
            cert: fs.readFileSync(config.https.cert),
            ciphers: 'HIGH'
          };
          startHttpsServer = function(callback) {
            var https, https_server;
            https = require('https');
            https_server = https.createServer(https_options, app);
            return https_server.listen(config.port.https, function() {
              logger.debug('App listening on port ' + config.port.https + ' (https)');
              return callback();
            });
          };
          startHttpolyglotServer = function(callback) {
            var httpolyglot, httpolyglot_server;
            httpolyglot = require('httpolyglot');
            httpolyglot_server = httpolyglot.createServer(https_options, app);
            return httpolyglot_server.listen(config.port.https, function() {
              logger.debug('App listening on port ' + config.port.https + ' (http and https)');
              return callback();
            });
          };
          if (config.port.http === config.port.https) {
            return async.parallel([
              startHttpolyglotServer, function() {
                return logger.info('hi');
              }
            ], callback);
          } else {
            return async.parallel([startHttpServer, startHttpServer], callback);
          }
        } else {
          return async.parallel([startHttpServer], callback);
        }
      };
      return async.series([configureExpress, startWebServer, callback]);
    };
    return async.series([loadServerConfig, startWebApp, ready]);
  };

  module.exports.start = start;

  start(function() {
    return logger.info('Web server ready');
  });

}).call(this);
